#lang racket
(define (double x) (+ x x))
(define (halve x)  (/ x 2))
(define (even? x)  (= (remainder x 2)0))
(define (fast-expt-first b n a)
  (cond ((= n 0)1)
         ((= n 1)(* b a))
         ((even? n) (fast-expt-first (* b b) (/ n 2) a))
         (else (fast-expt-first b (- n 1) (* a b))
         )))
(define (fast-expt b n) (fast-expt-first b n 1))
(fast-expt 2 8)