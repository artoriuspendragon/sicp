#lang racket
(define (runtime) (current-milliseconds)) 
(define (quick-smallest-divisor n)(quick-find-divisor n 2))
(define (quick-find-divisor n test-divisor)
  (cond ((> (square test-divisor) n) n)
        ((divides? n test-divisor) test-divisor)
        (else (quick-find-divisor n (next test-divisor)))
   ))
(define (next n)
(cond ((= n 2) 3)
      (else (+ n 2)))
  )
(define (divides? a b)(= (remainder a b) 0))
(define (square n)(* n n))
(define (prime? n) (= n (quick-smallest-divisor n)))
(define (smallest-prime? n)
  (if (prime? n) n
      (smallest-prime? (+ n 1))
      )
  )

(define (search-for-primes n)
  (newline)
  (display n)
  (start-prime-test n (runtime))
  )

(define (start-prime-test n start-time)
   (   if(smallest-prime? n)
       (report-prime (- (runtime) start-time))
       99)
  )
(define (report-prime elapsed-time)
  (display "...")
  (display elapsed-time)
  )
(search-for-primes 1000000000000000)