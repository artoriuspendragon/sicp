#lang racket
(define (average x y) (/ (+ x y) 2))



(define (make-point x y)
  (cons  x y)
  )
(define (x-point x) (car x))
(define (y-point y) (cdr y))
(define (print-point p)
  (newline)
  (display "(")
  (display (x-point p))
  (display ",")
  (display (y-point p))
  (display ")")
  )
(define (equal-point? x y)
 (and (= (x-point x) (x-point y)) (= (y-point x) (y-point y)))
  )
;(equal-point? (make-point 10 5) (make-point 10 5))
(define (make-segment a b)
  (if (equal-point? a b) (display "this two points are the same!")
      (cons a b)
      )
  )
(define (start-segment x)
  (car x))
(define (end-segment x)
  (cdr x))
(define (midpoint-segment x)
  (
   make-point (average (x-point(start-segment x)) (x-point(end-segment x))) (average (y-point (start-segment x)) (y-point (end-segment x)))
   )
  )
(print-point (midpoint-segment (make-segment (make-point 10 30) (make-point 20 40))))