#lang racket
(define (flatmap proc seq)
  (accumulate append null (map proc seq)))
(define (accumulate op initial sequence)
  (if (null? sequence) initial
      (op (car sequence) (accumulate op initial (cdr sequence)))))
(define (enumerate-interval low high)
  (if (> low high) null
      (cons low (enumerate-interval (+ low 1) high))))

(define (safe? k p)
  (define  (diagonal? m sub-p value) (cond ((null? sub-p) #true)
                                 ((= (abs ( - m (car sub-p))) value) #f)
                                 (else (diagonal? m (cdr sub-p) (+ value 1))))
                                 ) 
  (and (null?(filter (lambda (x) (= x  (car p))) (cdr p))) (diagonal? (car p) (cdr p) 1)) )
(define (adjoin-position new-row k rest-of-queens)
        (append (list new-row) rest-of-queens))
(define (queens board-size)
  (define (queen-cols k)
    (if(= k 0)
       (list  null)
       (filter
        (lambda (positions) (safe? k positions))
       (flatmap (lambda (rest-of-queens)
                  (map (lambda (new-row)
                         (adjoin-position new-row k rest-of-queens))
                       (enumerate-interval 1 board-size)))
                (queen-cols (- k 1))))
     )
   )(queen-cols board-size))
(length (queens 8))
;(enumerate-interval 1 5)
;(map (lambda (x)  (map (lambda (y) y) (enumerate-interval 1 10))) (list null))
;(null?(filter (lambda (x) (not (= x 1))) (list 1 1 1)))