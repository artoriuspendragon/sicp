#lang racket
(define (double x) (+ x x))
(define (halve x)  (/ x 2))
(define (even? x)  (= (remainder x 2)0))
(define (fast-expt-first b n a)
  (cond ((= n 0)1)
         ((= n 1)(* b a))
         ((even? n) (fast-expt-first (* b b) (/ n 2) a))
         (else (fast-expt-first b (- n 1) (* a b))
         )))
(define (fast-expt b n) (fast-expt-first b n 1))

(define (gcd x y) (if (= y 0) x  (gcd y (remainder x y))))


(define (cons a b) (* (fast-expt 2 a) (fast-expt 3 b)))
(define (car c)
  (define (get-car a c)
    (let ((factor (gcd c a)))
       (if (not (= factor a)) (/ (log(/ a 2)) (log 2))
        (get-car (* 2 a) c)      
                )
      )
    )
  (get-car 1 c)
  )
(define (cdr c)
  (define (get-car a c)
    (let ((factor (gcd c a)))
       (if (not (= factor a)) (/ (log(/ a 3)) (log 3))
        (get-car (* 3 a) c)      
                )
      )
    )
  (get-car 1 c)
  )
(car (cons 10 20))
(cdr (cons 10 1))
