#lang racket
(define (add-interval x y)
  (make-interval (+ (lower-bound x) (lower-bound y))
                 (+ (upper-bound x) (upper-bound y)))
  )
(define (make-interval lower upper) (cons lower upper))
(define (lower-bound x) (car x))
(define (upper-bound x) (cdr x))
(define (mul-interval x y)
  (let ((p1 (* (lower-bound x) (lower-bound y)))
        (p2 (* (lower-bound x) (upper-bound y)))
        (p3 (* (upper-bound x) (lower-bound y)))
        (p4 (* (upper-bound x) (upper-bound y)))
        )
    (make-interval (min p1 p2 p3 p4) (max p1 p2 p3 p4))
   )
  )
(define (center i) (/ (+ (lower-bound i) (upper-bound i)) 2))
(define (width i) (/ (- (upper-bound i) (lower-bound i)) 2))
(define (div-interval x y)
  (if (= (- (upper-bound y) (lower-bound y)) 0) (display "wrong!")
   (mul-interval x (make-interval (/ 1.0 (upper-bound y)) (/ 1.0 (lower-bound y))))
   )
  )
(define (sub-interval x y)
  (make-interval (- (lower-bound x) (lower-bound y))
                 (- (upper-bound x) (upper-bound y)))
  )
(define (make-center-percent center percent) (make-interval (- center (* center percent)) (+ center (* center percent))))
(define (percent x) (/ (- (upper-bound x) (center x)) (center x)))
(define (part1 r1 r2) (div-interval (mul-interval r1 r2) (add-interval r1 r2)))
(define (part2 r1 r2) (let ((one (make-interval 1 1))) (div-interval one (add-interval (div-interval one r1) (div-interval one r2)))))
(part1 (make-interval 1 0.02) (make-interval 2 0.5))
(part2 (make-interval 1 0.02) (make-interval 2 0.5))