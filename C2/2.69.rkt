#lang racket

(define (adjoin-set x set)
  (cond ((null? set) (list x))
        ((< (weight x) (weight (car set))) (cons x set))
  (else (cons (car set) (adjoin-set x (cdr set))))))

(define(make-leaf symbol weight)
  (list 'leaf symbol weight))
(define (leaf? object)
  (equal? (car object) 'leaf))
(define (symbol-leaf x)
  (cadr x))
(define (weight-leaf x) (caddr x))
(define (make-code-tree left right)
  (list left
        right
        (append (symbols left)  (symbols right))
        (+ (weight left) (weight right))))
(define (left-branch tree) (car tree))
(define (right-branch tree) (cadr tree))
(define (symbols tree)
  (if (leaf? tree)
      (list  (symbol-leaf tree))
      (caddr tree)))
(define (weight tree)
  (if (leaf? tree)
      (weight-leaf tree)
      (cadddr tree)))
(define (decode bits tree)
  (define (decode-1 bits current-branch)
    (if (null? bits)
        '()
        (let ((next-branch (choose-branch (car bits) current-branch)))
          (if (leaf? next-branch)
              (cons (symbol-leaf next-branch)
                    (decode-1 (cdr bits) tree))
              (decode-1 (cdr bits) next-branch)))))
  (decode-1 bits tree))
(define (choose-branch bit branch)
  (cond ((= bit 0) (left-branch branch))
        ((= bit 1) (right-branch branch))
        (else (error"error!"))))
(define sample-tree (make-code-tree (make-leaf 'A 4) (make-code-tree
                                                      (make-leaf 'B 2)
                                                      (make-code-tree (make-leaf 'D 1)
                                                                      (make-leaf 'C 1)))))
(define (make-leaf-set pairs)
  (if(null? pairs) '()
     (let ((pair (car pairs)))
       (adjoin-set (make-leaf (car pair) (cadr pair))
                   (make-leaf-set (cdr pairs))))))
(define (encode message tree)
  (if (null? message)
      '()
      (append (encode-symbol (car message) tree)
              (encode (cdr message) tree))))
(define (encode-symbol message tree)
  (define (encode-start result tree)
    (if (leaf? tree)(cons (equal? (symbol-leaf tree) message) result)
           (let ((left-ifresult (encode-start (append  result (list'0)) (left-branch tree)) ))
             (if (car left-ifresult) left-ifresult
                 (let((right-ifresult(encode-start (append result (list'1)) (right-branch tree))))
                   (if(car right-ifresult) right-ifresult
                      (error "no such letter!")))))
        ))
  (cdr (encode-start '() tree) ))
(define (generate-huffman-tree pairs)
  (successive-merge (make-leaf-set pairs)))
(define (successive-merge ordered-set)
    (cond ((= 0 (length ordered-set))
            '())
          ((= 1 (length ordered-set))
            (car ordered-set))
          (else
            (let ((new-sub-tree (make-code-tree (car ordered-set)
                                                (cadr ordered-set)))
                  (remained-ordered-set (cddr ordered-set)))
                (successive-merge (adjoin-set new-sub-tree remained-ordered-set))))))

(generate-huffman-tree (list (list 'A 4) (list 'B 2) (list 'C 1) (list 'D 1)))

