#lang racket
(define (square x) (* x x))
(define (add-complex z1 z2)
  (make-from-real-imag (+ (real-part z1) (real-part z2))
                       (+ (imag-part z1) (imag-part z2))))
(define (sub-complex z1 z2)
  (make-from-real-imag (-(real-part z1) (real-part z2))
                       (-(imag-part z1) (imag-part z2))))
(define (mul-complex z1 z2)
  (make-from-mag-ang (* (magnitude z1) (magnitude z2))
                     (+ (angle z1) (angle z2))))
(define (div-complex z1 z2)
  (make-from-mag-ang (/ (magnitude z1) (magnitude z2))
                     (- (angle z1) (angle z2))))

;Ben
(define (real-part-rectangular z) (car z))
(define (imag-part-rectangular  z) (cdr z))
(define (magnitude-rectangular  z)
  (sqrt (+ (square (real-part z)) (square (imag-part-rectangular  z)))))
(define (angle-rectangular  z)
  (atan (imag-part-rectangular  z) (real-part-rectangular  z)))
(define (make-from-real-imag-rectangular  x y) (attach-tag 'rectangular (cons x y)))
(define (make-from-mag-ang-rectangular  r a) (cons (* r (cons a)) (* r (sin a))))

;Alyssa
(define (real-part-polar z)
  (* (magnitude-polar z) (cos (angle-polar z))))
(define (imag-part-polar z)
  (* (magnitude-polar z) (sin (angle-polar z))))
(define (magnitude-polar z) (car z))
(define (angle-polar x) (cdr z))
(define (make-from-real-imag-polar x y)
  (attach-tag 'polar (cons (sqrt (+ (square x) (square y)) )
        (atan y x))))
(define (make-from-mag-ang-polar r a) (cons r a))


(define (attach-tag type-tag contents)
  (cons type-tag contents))
(define (type-tag datum)
  (if(pair? datum)
     (car datum)
     (error "bad tagged!")))
(define (contents datum)
  (if (pair? datum)
      (cdr datum)
      (error "badtagged!")))
(define (rectangular? z)
  (equal? (type-tag z) 'rectangular))
(define (polar? z)
  (equal? (type-tag z) 'polar))


(define (real-part z)
  (cond ((rectangular? z)
         (real-part-rectangular (contents z)))
        ((polar? z)
         (real-part-polar (contents z)))
        (else (error "wrong type!"))))
(define (imag-part z)
  (cond ((rectangular? z)
         (imag-part-rectangular (contents z)))
        ((polar? z)
         (imag-part-polar (contents z)))
        (else (error "wrong type!"))))
(define (manitude z)
  (cond ((rectangular? z)
         (manitude-rectangular (contents z)))
        ((polar? z)
         (manitude-polar (contents z)))
        (else (error "wrong type!"))))
(define (angle z)
  (cond ((rectangular? z)
         (angle-rectangular (contents z)))
        ((polar? z)
         (angle-polar (contents z)))
        (else (error "wrong type!"))))
